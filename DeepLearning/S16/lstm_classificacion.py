# -*- coding: utf-8 -*-
"""lstm_classificacion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BuPPMpPu-nVLhRmwJSl9NrYkvOd9VLLU
"""

#https://machinelearningmastery.com/sequence-classification-lstm-recurrent-neural-networks-python-keras/

#Simple LSTM for Sequence Classification
import tensorflow as tf
from tensorflow.keras.datasets import imdb
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Embedding
from tensorflow.keras.preprocessing import sequence
# fix random seed for reproducibility
tf.random.set_seed(7)

# load the dataset but only keep the top n words, zero the rest
top_words = 5000
(X_train, y_train), (X_test, y_test) = imdb.load_data(num_words=top_words)

# truncate and pad input sequences
max_review_length = 500
X_train = sequence.pad_sequences(X_train, maxlen=max_review_length)
X_test = sequence.pad_sequences(X_test, maxlen=max_review_length)

# create the model
embedding_vecor_length = 32
model = Sequential()
model.add(Embedding(top_words, embedding_vecor_length, input_length=max_review_length))
model.add(LSTM(100))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
print(model.summary())
model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=3, batch_size=64)

# Final evaluation of the model
scores = model.evaluate(X_test, y_test, verbose=0)
print("Accuracy: %.2f%%" % (scores[1]*100))

# prompt: muestre algunos ejemplos de prueba y su respectiva prediccion, y compararla con la salidad real

# Predict probabilities for the first 5 examples in the test set
predictions = model.predict(X_test[:5])

# Print the predicted probabilities and round them to 0 or 1 for class prediction
for i in range(5):
  print(f"Example {i+1}:")
  print(f"  Predicted probability: {predictions[i][0]:.4f}")
  predicted_class = 1 if predictions[i][0] > 0.5 else 0
  print(f"  Predicted class: {predicted_class}")
  print(f"  Actual class: {y_test[i]}")
  print("-" * 20)